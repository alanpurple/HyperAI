definitions:
  VisionTask:
    description: use only when taskType is 'vision'
    type: object
    properties:
      name:
        type: string
        example: Vision task name
      taskType:
        type: string
        enum: ['preprocessing', 'segmentation', 'classification', 'detection' ]
        required: true
      includeMask:
        type: boolean
      completed:
        type: boolean
      preprocessed:
        description: output folder, only for preprocessing task
        type: string
        example: /preprocessing/output/folder
  TextTask:
    description: use only when taskType is 'text'
    type: object
    properties:
      name:
        type: string
  StructuralTask:
    type: object
    properties:
      name:
        type: string
      taskType:
        type: string
        enum: [ 'recommendation', 'clustering', 'classification', 'regression' ]
        required: true
  Project:
    type: object
    properties:
      name:
        type: string
        example: Example project
        required: true
      dataURI:
        type: string
        required: true
      projectType:
        type: string
        enum: ['single', 'sequential', 'multiple_comparison']
      category:
        type: string
        enum: ['various', 'vision', 'text', 'structural']
      owner:
        type: string
        description: Email of project owner if user account type is 'administrator', otherwise 'self'
        readOnly: true
      members:
        description: one and only owner, others are all attendee(for now)
        type: array
        items:
          type: object
          properties:
            user:
              type: string
              description: project member email
              example: member@project.com
            role:
              type: string
              enum: ['attendee', 'member']
          required: true
      visionTasks:
        type: array
        items:
          $ref: '#/definitions/VisionTask'
      textTasks:
        type: array
        items:
          $ref: '#/definitions/TextTask'
      structuralTasks:
        type: array
        items:
          $ref: '#/definitions/StructuralTask'
      createdAt:
        type: date-time
        readOnly: true
        example: "2021-10-27T07:14:57.087Z"
      updatedAt:
        type: date-time
        readOnly: true
        example: "2021-10-27T07:14:57.087Z"
paths:
  /project:
    get:
      tags:
        - Project
      summary: Retrieve a list of projects
      description: Retrieve a list of projects from db.
      responses:
        200:
          description: A list of projects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/definitions/Project'
        404:
          description: Not Found.
    post:
      tags:
        - Project
      summary: New project
      description: Add a new project to db.
      produces:
        - application/json
      requestBody:
        description: "Project data"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/Project'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  code:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: Created
                  data:
                    type: array
                    items:
                      $ref: '#/definitions/Project'
        400:
          description: Project name already in use or ValidationError or CastError
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  code:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: Project name already in use.
                  data:
                    type: object
    delete:
      tags:
        - Project
      summary: Delete projects
      description: Delete selected projects.
      produces:
        - application/json
      requestBody:
        description: \'name\'s of selected projects
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                names:
                  type: array
                  items:
                    type: string
                  uniqueItems: true
                  example: ["My Project 01", "My Project 02", "My Project 03"]
      responses:
        200:
          description: deletedCount
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: OK
                  data:
                    type: object
                    properties:
                      deletedCount:
                        type: integer
                        example: 3
        400:
          description: Target is not an array or empty.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  code:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: Target is not an array or empty.
        404:
          description: No project was deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  code:
                    type: number
                    example: 404
                  message:
                    type: string
                    example: No project was deleted.
                  data:
                    type: object
  /project/{name}:
    get:
      tags:
        - Project
      summary: Retrieve a project
      description: Retrieve a project from db.
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: path parameter takes the project name
          required: true
          type: string
      responses:
        200:
          description: A project
          content:
            application/json:
              schema:
                $ref: '#/definitions/Project'
        400:
          description: Path parameter error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  code:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: Path parameter error - project name
        404:
          description: A project with the specified name was not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  code:
                    type: number
                    example: 404
                  message:
                    type: string
                    example: A project with the specified name was not found.
                  data:
                    type: object
    delete:
      tags:
        - Project
      summary: Delete a project
      description: Delete a project.
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: path parameter takes the project name
          required: true
          type: string
      responses:
        200:
          description: A deleted project
          content:
            application/json:
              schema:
                $ref: '#/definitions/Project'
        400:
          description: Path parameter error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  code:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: Path parameter error - project name
        404:
          description: No project was deleted. (A project with the specified name was not found)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  code:
                    type: number
                    example: 404
                  message:
                    type: string
                    example: No project was deleted.
                  data:
                    type: object
  /project/{name}/members:
    put:
      tags:
        - Project
      summary: Add or Remove project members
      description: Modify a project.
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: path parameter takes the project name
          required: true
          type: string
      requestBody:
        description: add - email and role of project members, remove - email of project members
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                inMember:
                  type: array
                  items:
                    type: object
                    properties:
                      user:
                        type: string
                      role:
                        type: string
                        enum: ['member', 'attendee']
                  uniqueItems: true
                  example: [{user: "user1@example.com", role: "member"}, {user: "user2@example.com", role: "member"}, {user: "user3@example.com", role: "attendee"}]
                outMember:
                  type: array
                  items:
                    type: string
                  uniqueItems: true
                  example: [ "user7@example.com", "user8@example.com", "user9@example.com" ]
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  code:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: Created
        400:
          description: |
            Path parameter error
            Project members already exist
            Project member must have at least one user
            The target project does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  code:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: Project member must have at least one user
  /project/{name}/task:
    put:
      tags:
        - Project
      summary: Add project tasks
      description: Modify a project.
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: path parameter takes the project name
          required: true
          type: string
      requestBody:
        description:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [ 'structural', 'text', 'vision' ]
                  example: structural
                task:
                  type: object
                  description: task object (VisionTask, TextTask, StructuralTask)
                  properties:
                    name:
                      type: string
                    taskType:
                      type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  code:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: Created
        400:
          description: |
            Path parameter error
            The task name already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  code:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: The task name already exists.
  /project/{name}/task/{type}/{taskName}:
    delete:
      tags:
        - Project
      summary: Remove project tasks
      description: Modify a project.
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: path parameter takes the project name
          required: true
          type: string
        - name: type
          in: path
          description: path parameter takes the project category
          required: true
          type: string
          enum: [ 'structural', 'text', 'vision' ]
        - name: taskName
          in: path
          description: path parameter takes the project task name
          required: true
          type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  code:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: Created
        400:
          description: |
            Path parameter error
            Project must have at least one task.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  code:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: Project must have at least one task.